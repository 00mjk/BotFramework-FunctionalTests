steps:
- task: AzureCLI@1
  displayName: 'Create resource group and deploy bot'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptLocation: inlineScript
    inlineScript: |
     az deployment create --name "$(BotName)-RG" --template-file "$(System.DefaultWorkingDirectory)/$(TemplateLocation)" --location "westus" --parameters appId="$(DeployAppId)" appSecret="$(DeployAppSecret)" botId="$(BotName)" botSku=F0 newAppServicePlanName="$(BotName)" newWebAppName="$(BotName)-$(Build.BuildId)" groupName="$(BotName)-RG" groupLocation="westus" newAppServicePlanLocation="westus"

- powershell: |
    Write-Host "Setting BotBuilder packges version."
    $botbuilderversion = $env:BOTBUILDERPACKAGEVERSION

    if($botbuilderversion -eq 'stable')
    {
        #The requirements.txt doesn't require changes to install stable versions.
        Write-Host "BotBuilder latest stable version will be installed."
    }
    else
    {
        $file = '$(System.DefaultWorkingDirectory)/$(Parameters.sourceLocation)/requirements.txt'

        if ([string]::IsNullOrWhiteSpace($botbuilderversion))
        {
            Write-Host "BotBuilder latest preview version will be installed."

            #Add the test.pypi source at the beginning of requirements
            $content = Get-Content $file
            Set-Content -Path $file -Value "--pre --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/"
            Add-Content -Path $file -Value $content
        }
        else #specific version value set
        {
            Write-Host "BotBuilder version [$botbuilderversion] will be installed."

            #Add the test.pypi source at the beginning of requirements
            $content = Get-Content $file
            Set-Content -Path $file -Value "--extra-index-url https://test.pypi.org/simple/"
            Add-Content -Path $file -Value $content

            #Set botbuilder-integration-aiohttp version to value specified
            $content = @(Get-Content $file)
            $matchinfo = Select-String -Path $file -Pattern "botbuilder-integration-aiohttp"

            #matchinfo marks the line number from 1 instead of 0
            $content[$matchinfo.LineNumber - 1] = "botbuilder-integration-aiohttp==$botbuilderversion --pre"
            Set-Content -Path $file -Value $content

            #Set botbuilder-dialogs version to value specified
            $content = @(Get-Content $file)
            $matchinfo = Select-String -Path $file -Pattern "botbuilder-dialogs"

            #matchinfo marks the line number from 1 instead of 0
            $content[$matchinfo.LineNumber - 1] = "botbuilder-dialogs==$botbuilderversion --pre"
            Set-Content -Path $file -Value $content
        }

        $content = Get-Content $file
        Write-Host "requirements:"
        Write-Output $content
    }
  displayName: 'Set BotBuilder version value'

- script: |
   git config --global user.name "GitPythonDeploymentUser"
   git config --global user.email GitPythonDeploymentUser@Pipeline.com
   git init
   git add .
   git commit -m "cibuildtest"
   git remote add azure https://$(AzureDeploymentUser):$(AzureDeploymentPassword)@$(BotName)-$(Build.BuildId).scm.azurewebsites.net:443/$(BotName)-$(Build.BuildId).git
   git push azure master
  workingDirectory: '$(System.DefaultWorkingDirectory)/$(Parameters.sourceLocation)'
  displayName: 'Git bot deployment'

- task: AzureCLI@2
  displayName: 'Validate git deployment'
  inputs:
    azureSubscription: $(AzureSubscription)
    scriptType: ps
    scriptLocation: inlineScript
    inlineScript: |
     #Getting logs from Azure
     az webapp log download --name $(BotName)-$(Build.BuildId) --resource-group $(BotName)-rg --log-file "$(System.DefaultWorkingDirectory)\logs.zip";
     Expand-Archive "$(System.DefaultWorkingDirectory)\logs.zip" -DestinationPath "$(System.DefaultWorkingDirectory)\logs";
     $file = "$(System.DefaultWorkingDirectory)/logs/deployments/*/log.log"
     $content = Get-Content $file

     #Validates if the log contains the Deployment successful line
     Write-Host "Validating deployment log."
     $containsWord = $content | %{$_ -match "Deployment successful"}
     if ($containsWord -contains $true) {
         Write-Host "Deployment successful, check the git deploy step for more information."
     } else {
         Write-Host "An error occurred during the deploy."
         Write-Output $content
         Write-Error "An error occurred during the deploy."
     }
  condition: succeededOrFailed()
