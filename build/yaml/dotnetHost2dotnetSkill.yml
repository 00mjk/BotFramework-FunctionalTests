#
# Build a C# Host bot and a C# Skill bot. Optionally deploy them and run functional tests.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildConfiguration: 'Debug'
  BuildPlatform: 'any cpu'
  TriggeredReason: $[ coalesce( variables['TriggeringBuildReason'], variables['Build.Reason'] ) ]
  # AzureSubscription: define in Azure
  # BotBuilderPackageVersionHost: (optional) define in Azure
  # BotBuilderPackageVersionSkill: (optional) define in Azure  
  # DeleteResourceGroup: (optional) define in Azure
  # DotNetDotNetHostAppId: define in Azure
  # DotNetDotNetHostAppSecret: define in Azure
  # DotNetDotNetHostBotName: define in Azure
  # DotNetDotNetSkillAppId: define in Azure
  # DotNetDotNetSkillAppSecret: define in Azure
  # DotNetDotNetSkillBotName: define in Azure
  # ExecutePipelinesPersonalAccessToken: (optional) define in Azure
  # NetCoreSdkVersionHost: define in Azure
  # NetCoreSdkVersionSkill: define in Azure
  # NextBuild: define in Azure and set to either a build name or an empty string
  # TriggeredBy: define in Azure and set to an empty string

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), in(variables['TriggeredReason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(DotNetDotNetHostBotName)
        SkillBotName: $(DotNetDotNetSkillBotName)
      steps:
      - template: cleanResourcesStep.yml

- stage: Build
  condition: always()
  jobs:
    - job: Validate_Host_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionHost)
      steps:
      - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
        displayName: 'Tag Build with TriggeredReason, TriggeredBy, NextBuild'
        inputs:
          tags: |
            TriggeredReason=$(TriggeredReason)
            $(TriggeredBy)
            NextBuild=$(NextBuild)
        continueOnError: true

      - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Host_Bot
      dependsOn: Validate_Host_NetCore_Version
      variables:
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        Parameters.solution: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/SimpleHostBot.sln'
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/SimpleHostBot.csproj'
      steps:
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml

    - job: Validate_Skill_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionSkill)
      steps:
        - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Skill_Bot
      dependsOn: Validate_Skill_NetCore_Version
      variables:
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.solution: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.sln'
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.csproj'
      steps:
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml

- stage: Deploy
  condition: and(succeeded(), in(variables['TriggeredReason'], 'Schedule', 'Manual'))
  jobs:
    - job: Deploy_Host
      variables:
        BotName: $(DotNetDotNetHostBotName)
        DeployAppId: $(DotNetDotNetHostAppId)
        DeployAppSecret: $(DotNetDotNetHostAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        ProjectName: SimpleHostBot
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/SimpleHostBot.csproj'
        TemplateLocation: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionHost)/host/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - powershell: |
         # Set values in appsettings.json file.
         $file = "$(System.DefaultWorkingDirectory)\SkillsFunctionalTests\dotnet\$(NetCoreSdkVersionHost)\host\appsettings.json";
         $content = Get-Content -Raw $file | ConvertFrom-Json;
         $content.SkillHostEndpoint = "https://$(DotNetDotNetHostBotName)-$(Build.BuildId).azurewebsites.net/api/skills";

         # Create Skill Class
         class Skill{[String] $Id; [String] $AppId; [String] $SkillEndpoint;};

         # Create list of botframework skills
         $botFrameworkSkills = New-Object -TypeName System.Collections.Generic.List[Skill];

         # Create Skill object
         $dotnetSkill = New-Object -TypeName Skill;
         $dotnetSkill.Id = "EchoSkillBot";
         $dotnetSkill.AppId = "$(DotNetDotNetSkillAppId)";
         $dotnetSkill.SkillEndpoint = "https://$(DotNetDotNetSkillBotName)-$(Build.BuildId).azurewebsites.net/api/messages";

         # Add skill to botframework skill list
         $botFrameworkSkills.Add($dotnetSkill);
         $content.BotFrameworkSkills = $botFrameworkSkills;
         $content | ConvertTo-Json | Set-Content $file;
        displayName: 'Set Host appsettings.json file.'

      - template: dotnetDeploySteps.yml

    - job: Deploy_Skill
      variables:
        BotName: $(DotNetDotNetSkillBotName)
        DeployAppId: $(DotNetDotNetSkillAppId)
        DeployAppSecret: $(DotNetDotNetSkillAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        ProjectName: EchoSkillBot
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.csproj'
        TemplateLocation: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - template: dotnetDeploySteps.yml

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(DotNetDotNetHostBotName)
        Parameters.project: 'SkillsFunctionalTests/tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillsFunctionalTests/tests/SkillFunctionalTests.sln'
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(succeeded('Build'), in(variables['TriggeredReason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(DotNetDotNetHostBotName)-RG" --yes
           call az group delete -n "$(DotNetDotNetSkillBotName)-RG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- stage: QueueNext
  condition: and(always(), ne(variables['TriggeredReason'], 'Manual'), ne(variables['NextBuild'], ''), ne(variables['ExecutePipelinesPersonalAccessToken'], ''))
  jobs:
    - job: TriggerBuild
      steps:
      - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
        displayName: 'Trigger build $(NextBuild)'
        inputs:
          buildDefinition: '$(NextBuild)'
          queueBuildForUserThatTriggeredBuild: true
          buildParameters: 'TriggeringBuildReason: $(TriggeredReason), TriggeredBy: Triggered_by_$(Build.DefinitionName)/$(Build.BuildNumber)'
          password: '$(ExecutePipelinesPersonalAccessToken)'
          enableBuildInQueueCondition: true
          blockingBuildsList: '$(NextBuild)'
        continueOnError: true
        condition: and(succeededOrFailed(), ne(variables['TriggeredReason'], 'Manual'), ne(variables['NextBuild'], ''), ne(variables['ExecutePipelinesPersonalAccessToken'], ''))