#
# Build a C# Skill bot. Optionally deploy it and a Python Host bot and run functional tests.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'Debug'
  # AzureDeploymentPassword: define in Azure
  # AzureDeploymentUser: define in Azure
  # AzureSubscription: define in Azure
  # BotBuilderPackageVersionHost: (optional) define in Azure
  # BotBuilderPackageVersionSkill: (optional) define in Azure
  # DeleteResourceGroup: (optional) define in Azure
  # NetCoreSdkVersionSkill: define in Azure
  # NextBuild: (optional) define in Azure
  # PyDotNetHostAppId: define in Azure
  # PyDotNetHostAppSecret: define in Azure
  # PyDotNetHostBotName: define in Azure
  # PyDotNetSkillAppId: define in Azure
  # PyDotNetSkillAppSecret: define in Azure
  # PyDotNetSkillBotName: define in Azure
  # PipelinesPersonalAccessToken: (optional) define in Azure

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(PyDotNetHostBotName)
        SkillBotName: $(PyDotNetSkillBotName)
      steps:
      - template: cleanResourcesStep.yml
        
- stage: Build
  condition: always()
  jobs:
    - job: Validate_Skill_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionSkill)
      steps:
      - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
        displayName: 'Tag Build with Build.Reason=$(Build.Reason) NextBuild=$(NextBuild)'
        inputs:
          tags: |
            Build.Reason=$(Build.Reason)
            NextBuild=$(NextBuild)
        continueOnError: true

      - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Skill_Bot
      dependsOn: Validate_Skill_NetCore_Version
      variables:
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.solution: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.sln'
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.csproj'
      steps:
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml

- stage: Deploy
  condition: and(succeeded(), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Deploy_Host
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        BotName: $(PyDotNetHostBotName)
        DeployAppId: $(PyDotNetHostAppId)
        DeployAppSecret: $(PyDotNetHostAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        Parameters.sourceLocation: 'SkillsFunctionalTests/python/host'
        TemplateLocation: 'SkillsFunctionalTests/python/host/deploymentTemplates/template-with-new-rg.json'
      steps:
      - powershell: |
         Write-host "Setting config file"
         $file = "$(System.DefaultWorkingDirectory)/$(Parameters.sourceLocation)/.env";
         $content = Get-Content -Raw $file | ConvertFrom-StringData;
         $content.SKILL_BOT_APP_ID = "$(PyDotNetSkillAppId)";
         $content.SKILL_BOT_ENDPOINT = "https://$(PyDotNetSkillBotName)-$(Build.BuildId).azurewebsites.net/api/messages";
         $content.SKILL_HOST_ENDPOINT = "https://$(PyDotNetHostBotName)-$(Build.BuildId).azurewebsites.net/api/skills";

         Clear-Content $file;
         foreach ($key in $content.keys) { Add-Content $file "$key=$($content.$key)" };
        displayName: 'Update .env file'

      - template: pythonDeploySteps.yml

    - job: Deploy_Skill
      variables:
        BotName: $(PyDotNetSkillBotName)
        DeployAppId: $(PyDotNetSkillAppId)
        DeployAppSecret: $(PyDotNetSkillAppSecret)
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        ProjectName: EchoSkillBot
        Parameters.project: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/EchoSkillBot.csproj'
        TemplateLocation: 'SkillsFunctionalTests/dotnet/$(NetCoreSdkVersionSkill)/skill/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - template: dotnetDeploySteps.yml

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(PyDotNetHostBotName)
        Parameters.project: 'SkillsFunctionalTests/tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillsFunctionalTests/tests/SkillFunctionalTests.sln'
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(succeeded('Build'), in(variables['Build.Reason'], 'Schedule', 'Manual'))
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(PyDotNetHostBotName)-RG" --yes
           call az group delete -n "$(PyDotNetSkillBotName)-RG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- stage: QueueNext
  condition: always()
  jobs:
    - job: TriggerBuild
      steps:
      - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
        displayName: 'Trigger build $(NextBuild)'
        inputs:
          buildDefinition: '$(NextBuild)'
          queueBuildForUserThatTriggeredBuild: true
          password: '$(PipelinesPersonalAccessToken)'
          enableBuildInQueueCondition: true
          blockingBuildsList: '$(NextBuild)'
        continueOnError: true
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'Manual'), ne(variables['NextBuild'], ''), ne(variables['PipelinesPersonalAccessToken'], ''))