#
# Build a C# Skill bot. Optionally deploy it and a Python Host bot and run functional tests.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BuildConfiguration: 'Debug'
  BuildPlatform: 'any cpu'
  TriggeredReason: $[ coalesce( variables['TriggeringBuildReason'], variables['Build.Reason'] ) ]
  # AzureDeploymentPassword: define in Azure
  # AzureDeploymentUser: define in Azure
  # AzureSubscription: define in Azure
  # BotBuilderPackageVersionHost: (optional) define in Azure
  # BotBuilderPackageVersionSkill: (optional) define in Azure
  # DeleteResourceGroup: (optional) define in Azure
  # ExecutePipelinesPersonalAccessToken: (optional) define in Azure
  # NetCoreSdkVersionSkill: define in Azure
  # NextBuild: define in Azure and set to either a build name or an empty string
  # PyDotNetHostAppId: define in Azure
  # PyDotNetHostAppSecret: define in Azure
  # PyDotNetHostBotName: define in Azure
  # PyDotNetSkillAppId: define in Azure
  # PyDotNetSkillAppSecret: define in Azure
  # PyDotNetSkillBotName: define in Azure
  # RegistryUrlHost: (optional) define in Azure
  # RegistryUrlSkill (Optional): define this in Azure
  # TestFilter: (optional) define in Azure. Example: '&TestCategory!=SkipForV3Bots'
  # TriggeredBy: define in Azure and set to an empty string

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), in(variables['TriggeredReason'], 'Schedule', 'Manual', 'BuildRunner'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(PyDotNetHostBotName)
        SkillBotName: $(PyDotNetSkillBotName)
      steps:
      - template: cleanResourcesStep.yml

- stage: Build
  condition: succeededOrFailed()
  jobs:
    - job: Validate_Skill_NetCore_Version
      variables:
        Parameters.netCoreSdkVersion: $(NetCoreSdkVersionSkill)
      steps:
      - task: colinsalmcorner.colinsalmcorner-buildtasks.tag-build-task.tagBuildOrRelease@0
        displayName: 'Tag Build with TriggeredReason, TriggeredBy, NextBuild'
        inputs:
          tags: |
            TriggeredReason=$(TriggeredReason)
            NextBuild=$(NextBuild)
            $(TriggeredBy)
        continueOnError: true

      - template: dotnetValidateNetCoreSdkVersion.yml

    - job: Build_Skill_Bot
      dependsOn: Validate_Skill_NetCore_Version
      variables:
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
      steps:
      - powershell: |
         if("$env:NetCoreSdkVersionSkill".Trim() -eq "3.1")
         {
           $SolutionPath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot/EchoSkillBot.sln"
           $ProjectPath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot/EchoSkillBot.csproj"
         }
         if("$env:NetCoreSdkVersionSkill".Trim() -eq "2.1")
         {
           $SolutionPath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot-2.1/EchoSkillBot.sln"
           $ProjectPath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot-2.1/EchoSkillBot.csproj"
         }
         Write-Host "##vso[task.setvariable variable=Parameters.solution;]$SolutionPath"
         Write-Host "##vso[task.setvariable variable=Parameters.project;]$ProjectPath"
        displayName: 'Set solution and project paths'
      - template: dotnetInstallPackagesSteps.yml
      - template: dotnetBuildSteps.yml
      - template: dotnetTagBotBuilderVersion.yml

- stage: Deploy
  condition: and(succeeded(), in(variables['TriggeredReason'], 'Schedule', 'Manual', 'BuildRunner'))
  jobs:
    - job: Deploy_Host
      variables:
        HostBotName: $(PyDotNetHostBotName)
        SkillBotName: $(PyDotNetSkillBotName)
        SkillAppId: $(PyDotNetSkillAppId)
        BotName: $(PyDotNetHostBotName)
        DeployAppId: $(PyDotNetHostAppId)
        DeployAppSecret: $(PyDotNetHostAppSecret)
        Registry: $[variables.RegistryUrlHost]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        Parameters.sourceLocation: 'Bots/Python/Consumers/CodeFirst/SimpleHostBot'
        TemplateLocation: 'Bots/Python/Consumers/CodeFirst/SimpleHostBot/deploymentTemplates/template-with-new-rg.json'
      steps:
      - template: pythonSetConfigFileSteps.yml
      - template: pythonDeploySteps.yml

    - job: Deploy_Skill
      variables:
        BotName: $(PyDotNetSkillBotName)
        DeployAppId: $(PyDotNetSkillAppId)
        DeployAppSecret: $(PyDotNetSkillAppSecret)
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
      steps:
      - powershell: |
         if("$env:NetCoreSdkVersionSkill".Trim() -eq "3.1")
         {
           $ProjectPath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot/EchoSkillBot.csproj"
           $TemplatePath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot/DeploymentTemplates/template-with-new-rg.json"
         }
         if("$env:NetCoreSdkVersionSkill".Trim() -eq "2.1")
         {
           $ProjectPath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot-2.1/EchoSkillBot.csproj"
           $TemplatePath = "Bots/DotNet/Skills/CodeFirst/EchoSkillBot-2.1/DeploymentTemplates/template-with-new-rg.json"
         }
         Write-Host "##vso[task.setvariable variable=Parameters.project;]$ProjectPath"
         Write-Host "##vso[task.setvariable variable=TemplateLocation;]$TemplatePath"
        displayName: 'Set project and template paths'
      - template: dotnetDeploySteps.yml

    - job: Configure_OAuth
      dependsOn: Deploy_Skill
      steps:
      - task: AzureCLI@1
        displayName: 'Configure skill OAuth connection'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az bot show -g "$(PyDotNetSkillBotName)-RG" -n "$(PyDotNetSkillBotName)"
           call az bot authsetting create -g "$(PyDotNetSkillBotName)-RG" -n "$(PyDotNetSkillBotName)" -c TestOAuthProvider --client-id "$(PyDotNetSkillAppId)" --client-secret '$(PyDotNetSkillAppSecret)'' --service "oauth2" --provider-scope-string '""' --parameters authorizationUrl=https://webjobs.botframework.com/api/testauthprovider/authorize tokenUrl=https://webjobs.botframework.com/api/testauthprovider/token refreshUrl=https://webjobs.botframework.com/api/testauthprovider/refresh clientId="$(PyDotNetSkillAppId)" clientSecret="$(PyDotNetSkillAppSecret)"
        condition: always()

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(PyDotNetHostBotName)
        Parameters.project: 'Tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillFunctionalTests.sln'
        DefaultTestFilter: ''
        DotNetTestFilter: $[ coalesce( variables['TestFilter'], variables['DefaultTestFilter'] ) ]
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(succeeded('Build'), in(variables['TriggeredReason'], 'Schedule', 'Manual', 'BuildRunner'))
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(PyDotNetHostBotName)-RG" --yes
           call az group delete -n "$(PyDotNetSkillBotName)-RG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))

- stage: QueueNext
  condition: and(succeededOrFailed(), ne(variables['TriggeredReason'], 'Manual'), ne(variables['NextBuild'], ''))
  jobs:
    - job: TriggerBuild
      steps:
      - task: benjhuser.tfs-extensions-build-tasks.trigger-build-task.TriggerBuild@3
        displayName: 'Trigger build $(NextBuild)'
        inputs:
          buildDefinition: '$(NextBuild)'
          queueBuildForUserThatTriggeredBuild: true
          buildParameters: 'TriggeringBuildReason: $(TriggeredReason), TriggeredBy: Triggered_by_$(Build.DefinitionName)/$(Build.BuildNumber)'
          password: '$(ExecutePipelinesPersonalAccessToken)'
          enableBuildInQueueCondition: true
          blockingBuildsList: '$(NextBuild)'
        continueOnError: true
        condition: and(succeededOrFailed(), ne(variables['TriggeredReason'], 'Manual'), ne(variables['NextBuild'], ''), ne(variables['ExecutePipelinesPersonalAccessToken'], ''))
