#
# Build a v3 C# Skill bot. Deploy it and a Python Host bot and run functional tests.
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)
trigger: none
pr: none

variables:
  BotGroup: '$(BotName)-RG'
  BuildConfiguration: 'Debug'
  BuildPlatform: 'any cpu'
  CodesignValidation: false
  # AzureDeploymentPassword: define in Azure
  # AzureDeploymentUser: define in Azure
  # AzureSubscription: define in Azure
  # BotBuilderPackageVersionHost: (optional) define in Azure
  # BotBuilderPackageVersionSkill: (optional) define in Azure
  # DeleteResourceGroup: (optional) define in Azure
  # PyDotNetV3HostAppId: define in Azure
  # PyDotNetV3HostAppSecret: define in Azure
  # PyDotNetV3HostBotName: define in Azure
  # PyDotNetV3SkillAppId: define in Azure
  # PyDotNetV3SkillAppSecret: define in Azure
  # PyDotNetV3SkillBotName: define in Azure
  # RegistryUrlHost: (optional) define in Azure
  # RegistryUrlSkill (Optional): define this in Azure
  # TestFilter: (optional) define in Azure. Example: '&TestCategory!=SkipForV3Bots'

pool:
  vmImage: 'windows-2019'

stages:
- stage: Prepare
  condition: and(succeeded(), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_Preexisting_Resources
      variables:
        HostBotName: $(PyDotNetV3HostBotName)
        SkillBotName: $(PyDotNetV3SkillBotName)
      steps:
      - template: cleanResourcesStep.yml

- stage: Build
  dependsOn: []    # makes this run in parallel
  jobs:
    - job: Build_Skill_Bot
      variables:
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.solution: 'SkillsFunctionalTests/dotnet/v3/skill/EchoSkillBot.sln'
      steps:
      - template: dotnetV3BuildSteps.yml
      - template: dotnetV3TagBotBuilderVersion.yml

- stage: Deploy
  dependsOn:
  - Prepare
  - Build
  condition: succeeded('Build')
  jobs:
    - job: Deploy_Host
      variables:
        HostBotName: $(PyDotNetV3HostBotName)
        SkillBotName: $(PyDotNetV3SkillBotName)
        SkillAppId: $(PyDotNetV3SkillAppId)
        BotName: $(PyDotNetV3HostBotName)
        DeployAppId: $(PyDotNetV3HostAppId)
        DeployAppSecret: $(PyDotNetV3HostAppSecret)
        Registry: $[variables.RegistryUrlHost]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionHost]
        Parameters.sourceLocation: 'SkillsFunctionalTests/python/host'
        TemplateLocation: 'SkillsFunctionalTests/python/host/deploymentTemplates/template-with-new-rg.json'
      steps:
      - template: pythonSetConfigFileSteps.yml
      - template: pythonDeployStepsNewRG.yml

    - job: Deploy_Skill
      variables:
        BotName: $(PyDotNetV3SkillBotName)
        DeployAppId: $(PyDotNetV3SkillAppId)
        DeployAppSecret: $(PyDotNetV3SkillAppSecret)
        Registry: $[variables.RegistryUrlSkill]
        BotBuilderPackageVersion: $[variables.BotBuilderPackageVersionSkill]
        Parameters.solution: 'SkillsFunctionalTests/dotnet/v3/skill/EchoSkillBot.sln'
        Parameters.sourceLocation: 'SkillsFunctionalTests/dotnet/v3/skill/'
        TemplateLocation: 'SkillsFunctionalTests/dotnet/v3/skill/DeploymentTemplates/template-with-new-rg.json'
      steps:
      - template: dotnetV3DeploySteps.yml

- stage: Test
  dependsOn: Deploy
  jobs:
    - job: Run_Functional_Test
      variables:
        HostBotName: $(PyDotNetV3HostBotName)
        Parameters.project: 'SkillsFunctionalTests/tests/SkillFunctionalTests/SkillFunctionalTests.csproj'
        Parameters.solution: 'SkillsFunctionalTests/tests/SkillFunctionalTests.sln'
        DefaultTestFilter: ''
        DotNetTestFilter: $[ coalesce( variables['TestFilter'], variables['DefaultTestFilter'] ) ]
      steps:
      - template: functionalTestSteps.yml

- stage: Cleanup
  dependsOn:
  - Deploy
  - Test
  condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
  jobs:
    - job: Delete_RG
      steps:
      - task: AzureCLI@1
        displayName: 'Delete Resource Group'
        inputs:
          azureSubscription: $(AzureSubscription)
          scriptLocation: inlineScript
          inlineScript: |
           call az group delete -n "$(PyDotNetV3HostBotName)-RG" --yes
           call az group delete -n "$(PyDotNetV3SkillBotName)-RG" --yes
        condition: and(always(), ne(variables['DeleteResourceGroup'], 'false'))
