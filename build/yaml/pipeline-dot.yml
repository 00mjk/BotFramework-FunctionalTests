#
# Replaces the classic BotBuilder-DotNet-master-CI-PR-(MacLinux)
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
    vmImage: 'macOS-10.14'

trigger: none # ci trigger is set in ADO
pr: none # pr trigger is set in ADO

variables:
  BuildConfiguration: debug
steps:
# Note: Template ci-build-steps.yml is not supported in macOS because it calls VSBuild@1 in order to build the Windows-only ASP.NET Desktop assemblies.
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $file = "$(SampleRootPath)\nuget.config";
      
      $content = @"
      <?xml version="1.0" encoding="utf-8"?>
      <configuration>
        <packageSources>
          <add key="ConversationalAI" value="https://pkgs.dev.azure.com/ConversationalAI/BotFramework/_packaging/SDK/nuget/v3/index.json" />
          <add key="NuGet official package source" value="https://api.nuget.org/v3/index.json" />
        </packageSources>
        <activePackageSource>
          <add key="All" value="(Aggregate source)" />
        </activePackageSource>
      </configuration>
      "@;
      
      New-Item -Path $file -ItemType "file" -Value $content;
      
       '-------------'; get-content "$file"; '==================='
- task: UseDotNet@2
  displayName: 'Use .Net Core sdk 2.1.x'
  inputs:
    version: 2.1.x

- task: UseDotNet@2
  displayName: 'Use .Net Core sdk 3.1.x'
  inputs:
    version: 3.1.x

- task: NuGetToolInstaller@1
  inputs:
    versionSpec: 

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: 'Bots/DotNet/FunctionalTestsBots.sln'


- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    projects: Bots/DotNet/FunctionalTestsBots.sln


- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: build folder'
  inputs:
    PathtoPublish: build
    ArtifactName: build

- powershell: |
   cd ..
   ls -R
  displayName: 'Dir workspace'
  continueOnError: true
  condition: succeededOrFailed()