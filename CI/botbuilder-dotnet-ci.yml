#
# Replaces the classic BotBuilder-DotNet-master-CI-PR
#

# "name" here defines the build number format. Build number is accessed via $(Build.BuildNumber)
name: $(Build.BuildId)

pool:
  vmImage: $[ coalesce( variables['VMImage'], 'windows-2019' ) ] # or 'windows-latest' or 'vs2017-win2016'
  demands:
  - msbuild
  - visualstudio

trigger: none # ci trigger is set in ADO
pr: none # pr trigger is set in ADO

variables:
  ApiCompatVersion: 4.6.3
  BotBuilderDll: Microsoft.Bot.Builder.AI.Luis,Microsoft.Bot.Builder.AI.QnA,Microsoft.Bot.Builder.ApplicationInsights,Microsoft.Bot.Builder.Azure,Microsoft.Bot.Builder.Dialogs,Microsoft.Bot.Builder.Integration.ApplicationInsights.Core,Microsoft.Bot.Builder.Integration.AspNet.Core,Microsoft.Bot.Builder.TemplateManager,Microsoft.Bot.Builder.Testing,Microsoft.Bot.Builder,Microsoft.Bot.Configuration,Microsoft.Bot.Connector,Microsoft.Bot.Schema,Microsoft.Bot.Streaming
  BuildConfiguration: Debug
  BuildPlatform: Any CPU
  IsBuildServer: true # This activates package versioning in the projects in Microsoft.Bot.Builder.sln.
  MSBuildArguments: -p:SignAssembly=false -p:delaySign=false
  Parameters.solution: SkillFunctionalTests.sln
  PreviewPackageVersion: 4.9.0-preview-$(Build.BuildNumber) # This is consumed by projects in SkillFunctionalTests.sln.
  ReleasePackageVersion: 4.9.0-preview-$(Build.BuildNumber) # This is consumed by projects in SkillFunctionalTests.sln.
  runCodesignValidationInjection: false # Disables unnecessary CodeSign Validation step
#  DotNetCoverallsToken: define this in Azure
#  GitHubCommentApiKey: define this in Azure
#  ApiCompatExcludeClasses: (optional) define this in Azure
#  DisableApiCompatibityValidation: (optional) define this in Azure

# The following 2 stages run multi-configuration, multi-agent parallel jobs.
# Debug-Windows/Release-Windows => Builds everything in Debug/Release + the ASP.NET Desktop.
# Debug/Release => would build all .NET Standard libs and test them.
# The .NET 4.X asp.net integrations libraries do not build and test on non-windows boxes.
# If we drop support for .NET 4.x then we can drop to just Debug/Release.
stages:
- stage: Build
  jobs:
  - job: Debug_Windows_Configuration_21
    variables:
      BuildConfiguration: Debug
      BuildTarget: 'netcoreapp21' # set the TargetFramework property for tests to use netcoreapp2.1
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml
  - job: Debug_Windows_Configuration_31
    variables:
      BuildConfiguration: Debug
      BuildTarget: 'netcoreapp31' # set the TargetFramework property for tests to use netcoreapp3.1
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml
  - job: Release_Windows_Configuration_21
    variables:
      BuildConfiguration: Release
      BuildTarget: 'netcoreapp21' # set the TargetFramework property for tests to use netcoreapp2.1
      PublishCoverage: true
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml
  - job: Release_Windows_Configuration_31
    variables:
      BuildConfiguration: Release
      BuildTarget: 'netcoreapp31' # set the TargetFramework property for tests to use netcoreapp3.1
      PublishCoverage: true
    steps:
    - template: ci-build-steps.yml
    - template: ci-test-steps.yml

